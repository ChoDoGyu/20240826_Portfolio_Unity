public interface FSMState<T>
{
    //상태 시작
    void Enter(T e);

    //상태 진행
    void Execute(T e);

    //상태 종료
    void Exit(T e);
}
#region 인터페이스 개념
/*
참조
https://kimyir.tistory.com/16
 #1 인터페이스(interface) 개념

    인터페이스는 C#의 주요기능이자 객체 지향 코드다.
    기본적으로 함수 정의, 프로퍼티(get,set) 정의 같은걸 구현없이 할 수 있도록 도와준다.

    여기서 "구현없이" 라는 말이 중요하다.
    인터페이스 입장에선 구현 안해도 되니까 설계도 느낌으로 어떤걸 만들어야하는지만 알려준다.
    예를 들어 적들이나 건물같이 때리면 아파하거나 부숴지는 모션은 다르지만 결국엔 아파하면서 체력 깎인다는 함수를 구현해야만 하므로 
    DamageAble()같은 공통된 목적을 가진 함수를 만들어야만 한다. 
    예를 들어 IDamageAble이라는 인터페이스를 만들어서 안에다가 DamageAble();이라는 함수를 명시해놓기만 하면 된다. 
    이러면 적들이나 건물같은 애들이 IDamageAble이라는 인터페이스를 상속해서 목적을 가진 설계도를 받아 디테일한 부분을 구현만 하면된다. 
    인터페이스는 다중 상속도 되니까 이런식의 공통적인걸 묶는걸 많이 할 수 있다.

    인터페이스는 구현없이 명시만 하므로 인터페이스를 상속한 자식들은 반드시 명시한걸 재구현해야한다.
    이러한 인터페이스의 구현안해도 되는 특징은 복잡한 구조를 단순화 시키는 추상화와 비슷하다.
    하지만 추상 클래스와 인터페이스는 명백히 구분해야한다.


  - 추상 클래스 VS 인터페이스

    추상 클래스는 상속을 받아 기능을 이용하거나 확장을 하기 위함이고 
    인터페이스는 구현의 강제에 목적을 두어 구현 객체의 같은 동작을 보장한다는 데에 있다. 
    뭣보다도 둘의 가장 큰 차이는 인터페이스의 장점인 다중 상속 유무다.
    조금 더 깊게 파고 들어가면 추상 클래스는 상속의 개념이라 사용의도가 is-a 관계에 있지만 인터페이스는 의도가 다르게 can-do 관계에 있다.
 */
#endregion